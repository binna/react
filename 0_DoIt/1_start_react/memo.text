[1-1] 리엑트 시작하기
리액트의 가장 큰 특징은 화면 출력에 특화된 프레임 워크이다.

** 장점
1. 컨포넌트로 화면구성을 효율적으로 할 수 있다.
    리액트는 컴포넌트(component)라는 작고 독립적인 코드 블록을 조합하여 빠르고 효율적으로 화면을 구성한다.

2. 게임 엔진 원리를 도입하여 화면 출력속도가 빠르다.
    자바스크립트에는 제이쿼리와 핸들바라는 라이브러리가 있는데 화면이 커질수록 화면을 그리는 시간도 길어진다는 점과
    화면의 일부분만 수정되어도 화면 전체를 다시 그린다는 문제가 있다.
    페이스북 개발자들은 이런 문제를 해결하기 위해 게임 엔진 원리를 도입했다.
    ㄴ 다음에 나타날 화면의 일부(노드)를 미리 그려놓고 변경된 화면의 일부(노드)만 수정하는 가상화면(Virtual DOM) 기술을 만듦

** 비주얼 스튜디오 코드로 실습 진행
ㄴ extension
    1. Reactjs code snippets 설치
    2. Prettier - Code formatter 설치
ㄴ npm install -g yarn
ㄴ yarn global add create-react-app
ㄴ create-react-app 프로젝트명
ㄴ cd 프로젝트명
ㄴ yarn start




[1-2] 리액트 ES6 문법 액기스
** 디바운스와 스로틀
ㄴ 디바운스(debounce)는 
    어떤 내용을 입력하다가 특정 시간 동안 대기하고 있으면 마지막에 입력된 내용을 바탕으로 서버 요청을 하는 방법이다.
ㄴ 스로틀(throttle)은 
    디바운스 개념과 비슷하지만 '입력하는 동안에도...!!' 
    바로 이전에 요청한 작업을 주기적으로 실행한다는 점이 다르다.




[1-3] 리액트 컴포넌트
** JSX(JavaScript XML)의 줄임말로 '자바스크립트에 XML을 추가한 확장형 문법'이다.

** 컴포넌트
    규격만 맞으면 서로 연결할 수 있다.
    ㄴ 웹 사이트의 화면은 각 요소가 비슷하고 반복적으로 사용하는 경우가 많다(이점을 착안하여 컴포넌트가 등장하게 된 것)
    MVC의 뷰를 독립적으로 구성하여 재사용도 할 수 있고 컴포넌트를 통해 새로운 컴포넌트를 쉽게 만들 수도 있다. 
    다양한 모양의 블록을 조립한다고 상상하면 됨

** 컴포넌트의 구성 요소
    프로퍼티 : 상위 컴포넌트에서 하위 컨포넌트로 전달되는 읽기 전용 데이터(수정할 수 없다는 점, 명심!)
    state : 컴포넌트의 상태를 저장하고 변경할 수 있는 데이터
        ㄴ 주의할 점
            1. 생성자(constructor)에서 반드시 초기화 해야 한다.
            2. 생성자 state 값을 변경할 때는, 
                setState() 함수(상태 관리 함수)를 반드시 사용해야 한다.
            3. setState() 함수는 비동기로 처리되며, 
                setState() 코드 이후로 연결된 함수들의 실행이 완료된 시점에 화면 동기화 과정을 거친다.
    컨텍스트 : 부모 컴포넌트에서 생성하여 모든 자식 컴포넌트에 전달하는 데이터

** 컴포넌트의 생명주기(Lifecyle)
    컴포넌트 생성부터 생성 완료까지 4개의 생명주기 함수가 호출 -> 이 과정을 '생성과정'이라고 부름
        (constructor, getDerivedStateFromProp, render, componentDidMount)
    컴포넌트 생성 완료부터 갱신 완료까지 5개의 생명주기 함수가 호출 -> 이 과정을 '갱신과정'이라고 부름
        (getDerivedStateFromProp, shouldComponnetUpdate, render, getSnapshotBeforeUpdate, componentDidUpdate)
    갱신 완료부터 소멸 완료까지는 1개의 생명주기 함수가 호출 -> 이 과정을 '소멸과정'이라고 부름
        (componentWillUnmount)

** 콜백함수
    정의된 위치에서 실행하지 않고, 
    이후 특정 상황(이벤트, 다른 함수 호출 등)에서 실행되는 함수




[1-4] 에어비앤비 디자인 시스템 따라하기 
** 스토리북(react-storybook)
    비주얼 테스트를 위한 도구

** 비주얼 테스트란?
    화면을 구성하는 컴포넌트들을 독립적으로 관리하고 변화를 살펴볼 수 있는 방법

** 스토리북 실습
    1. 스토리북 설치
        yarn add --dev @storybook/react
    2. package.json에 스토리북 실행 명령어 추가
        scripts에 "storybook": "start-storybook -p 9001 -c .storybook" 추가
        ㄴ storybook 명령어가 스토리북 서버를 9001 포트를 통해 실행시킬 수 있도록 설정
    3. 스토리 파일 만들기
    4. 스토리북 config.js에 스토리 연결
        프로젝트 루트 폴더에 '.storybook'라는 폴더 생성,
        그 폴더 안에 config.js 설정 파일 생성하여 연결
    5. 스토리북 실행
        yarn storybook

** 스토리북 확장 도구 사용 실습
    1. addon-actions 설치
        yarn add --dev @storybook/addon @storybook/addon-actions
    2. addon-actions 설정 추가
        .storybook 폴더에 addons.js 파일 만들기
            ㄴ import '@storybook/addon-actions/register';
    3. addon-actions 적용
        ㄴ import {action} from '@storybook/addon-actions';
        ㄴ .add('onChange 예제', () => <Input name="name" onChange={action('onChange 이벤트 발생')} />)
    4. addon-jsx 설치
        yarn add --dev storybook-addon-jsx
    5. addon-jsx 설정 추가
        .storybook 폴더에 addons.js 파일
            ㄴ import 'storybook-addon-jsx/register';
        .storybook 폴더에 config.js 파일
            ㄴ import JSXAddon from 'storybook-addon-jsx';
            ㄴ setAddon(JSXAddon);
    6. addon-jsx 적용
        .add를 .addWithJSX로 수정
            ㄴ .addWithJSX('기본 설정', () => <Input name="name" />)
            ㄴ .addWithJSX('label 예제', () => <Input name="name" label="이름" />)
            ㄴ .addWithJSX('onChange 예제', () => <Input name="name" onChange={action('onChange 이벤트 발생')} />)

** 머티리얼 디자인(Material Design) : https://mui.com/
    구글에서 공개한 디자인 가이드
    ex) 안드로이드 디자인

** CDN 방식
    특정 파일을 전세계에 분산하여 복사해두어 현재 접속한 위치와 가장 근접한 곳에서 빠르게 내려받을 수 있도록 파일을 제공하는 방법
    ㄴ <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" />

** 루트폴더에 .env 생성
    SKIP_PREFLIGHT_CHECK=true

** https://materializecss.com/ > GET STARTED 클릭 > 다운로드 가능...!

** node-sass
    노드 버전 14대로 변경 후 진행(참고 : https://github.com/sass/node-sass/releases)
    ㄴ yarn remove node-sass
    ㄴ yarn add node-sass@4.14.1

** 테스트 코드(test code)
    작성한 코드가 제대로 기능하는지 확인하기 위해 작성하는 코드
    ㄴ 수행 기능을 작성하기 전에 테스트 코드부터 작성하는 개발방법을 테스트 위주 개발(test-Driven Development)이라고 함