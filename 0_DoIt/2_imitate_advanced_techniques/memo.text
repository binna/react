[2-5] 하이어오더 컴포넌트
** 커링
    함수형 프로그래밍 언어에서 가장 중요한 디자인 패턴
    함수를 반환하는 함수
    ㄴ 커링을 사용해야 하는 이유? "함수의 재활용" 때문에...!
    함수의 인자를 다시 구성하여 필요한 함수를 만드는 패턴

** 데코레이터 패턴(Decorator Pattern)
    클래스 간의 종속성 없이 기능만을 공유
    ㄴ 자바 언어에서는 이러한 데코레이터 패턴을 구현하기 위해 인터페이스를 사용하며, 자바스크립트에서는 커링을 사용

** 하이어오더 컴포넌트
1. 하이어오더 컴포넌트는 함수나 클래스 형태의 컴포넌트를 모두 반환할 수 있다.
2. 하이어오더 컴포넌트는 기존 컴포넌트에 연결된 프로퍼티를 모두 전달해 주어야 한다.
3. 하이어오더 컴포넌트와 확장 컴포넌트의 이름은 with로 시작한다.

** 하이어오더 컴포넌트 사용 확인하는 방법
1. 크롬 플러그인에서 React Developer Tools 설치
2. Components 탭에서 확인

** recompose 라이브러리
    하이어오더 컴포넌트 중 자주 사용하는 패턴을 모은 하이어오더 컴포넌트 라이브러리
    ㄴ recompose의 모든 함수들을 imoprt하면 프로젝트가 너무 무거워지므로 
       필요한 것만 추출하여 import하는 것이 좋음
    ㄴ 해당 라이브러리에 명시된 대로 코드를 작성하기만 하면 하이어오더 컴포넌트를 쉽게 작성할 수 있으나,
       명시한 대로 코드를 작성하다 보면 실제 구현에 필요 없는 코드가 입력될 수 있다.
       이는 리액트 앱의 성능 저하를 유발하기 때문에...!
       따라서 반복해서 입력해야 하는 불필요한 코드의 양을 줄여야 하는 경우에 사용해야 하고
       적절한 경우에만 최소한으로 사용하는 것이 좋다.
    1) branch() : 조건에 따라 다른 컴포넌트 출력
    2) withState() : 상태 관리와 이벤트 처리
    3) lifecycle() : 함수형 컴포넌트에 생명주기 함수 추가




[2-6] 컨텍스트로 데이터 관리하기
** 컨텍스트(Context)
    컨텍스트를 사용하면 여러 곳에 흩어진 데이터를 한 곳에 모아 체계적으로 관리할 수 있고,
    컴포넌트의 데이터를 효율적으로 수집하거나 공유할 수 있다.
    ㄴ state는 부모와 자식 컴포넌트가 연결된 상태에서 공유하는 데이터였으나
       컨텍스트는 부모와 자식 컴포넌트가 연결되어 있지 않아도 데이터를 공유할 수 있게 해준다.
       즉, 데이터 공유 저장소와 데이터 전파를 담당

** 관찰자 패턴(Observable Pattern)
    데이터는 공급자가 관리하고 관찰자는 공급자를 구독하여 데이터를 얻는 방식
    즉, 관찰자 패턴을 도입하면 공급자와 관찰자가 서로 역할을 분리하여 데이터를 관리하게 됨
    ㄴ 관찰자를 소비자라고 부르기도 한다.

** 공급자와 소비자의 관계
1. 소비자는 공급자보다 낮은 계층에 있어야 한다.
2. 소비자는 공급자가 제공하는 콜백 함수로 데이터를 변경할 수 있다.
    ㄴ 소비자는 공급자의 데이터를 변경할 수도 있다.
       단, 소비자가 공급자의 데이터를 변경할 때는, 공급자의 데이터에 직접 접근해서 변경하는 것이 아니라
           공급자로부터 데이터 변경을 위한 콜백 함수를 받아 데이터 변경 요청을 해야 한다.
       [중요] 단방향 데이터 흐름은 변경된 데이터의 일관성을 유지하는데 매우 효과적이다!!

** 모달
    배경이 어두워지면서 나타나는 알림창




[2-7] 리덕스로 데이터 관리하기
** 리덕스
    리덕스는 마치 가게를 운영하는 것과 비슷하다.
    ㄴ 그래서 리덕스의 데이터를 관리하는 객체도 스토어라고 부른다.
    리덕스는 데이터를 스토어(store)라는 곳에서 관리

** 지금까지 리액트에서 다루기 위해 배운 요소
    1. 프로퍼티 : 상위 컴포넌트에서 하위 컴포넌트로 전달되는 읽기 전용 데이터
    2. state : 컴포넌트의 state를 저장하고 변경할 수 있는 데이터
    3. 컨텍스트 : 부모 컴포넌트에서 생성하여 모든 자식 컴포넌트에 전달하는 데이터
    4. 리덕스 : 서버에서 받은 데이터를 앱 전체에 전달하거나 관리

** 리덕스의 동작 과정
    컴포넌트 -dispatch()-> 액션 -> 리듀서 -> 스토어 -connect()-> 컴포넌트
     손님     종업원       주문서   요리사             종업원      손님

 ** 리덕스 실습
    1. 리덕스 설치
        ㄴ yarn add redux react-redux
    2. 리덕스 크롬 확장 도구 설치
        ㄴ Redux DevTools
    3. 리덕스 개발자 도구 설치
        ㄴ yarn add redux-devtools-extension --dev

** createStore() : 스토어를 생성해주는 함수