** 커링
    함수형 프로그래밍 언어에서 가장 중요한 디자인 패턴

[2-5] 하이어오더 컴포넌트
** 커링
    함수를 반환하는 함수
    ㄴ 커링을 사용해야 하는 이유? "함수의 재활용" 때문에...!
    함수의 인자를 다시 구성하여 필요한 함수를 만드는 패턴

** 데코레이터 패턴(Decorator Pattern)
    클래스 간의 종속성 없이 기능만을 공유
    ㄴ 자바 언어에서는 이러한 데코레이터 패턴을 구현하기 위해 인터페이스를 사용하며, 자바스크립트에서는 커링을 사용

** 하이어오더 컴포넌트
1. 하이어오더 컴포넌트는 함수나 클래스 형태의 컴포넌트를 모두 반환할 수 있다.
2. 하이어오더 컴포넌트는 기존 컴포넌트에 연결된 프로퍼티를 모두 전달해 주어야 한다.
3. 하이어오더 컴포넌트와 확장 컴포넌트의 이름은 with로 시작한다.

** 하이어오더 컴포넌트 사용 확인하는 방법
1. 크롬 플러그인에서 React Developer Tools 설치
2. Components 탭에서 확인

** recompose 라이브러리
    하이어오더 컴포넌트 중 자주 사용하는 패턴을 모은 하이어오더 컴포넌트 라이브러리
    ㄴ recompose의 모든 함수들을 imoprt하면 프로젝트가 너무 무거워지므로 
       필요한 것만 추출하여 import하는 것이 좋음
    ㄴ 해당 라이브러리에 명시된 대로 코드를 작성하기만 하면 하이어오더 컴포넌트를 쉽게 작성할 수 있으나,
       명시한 대로 코드를 작성하다 보면 실제 구현에 필요 없는 코드가 입력될 수 있다.
       이는 리액트 앱의 성능 저하를 유발하기 때문에...!
       따라서 반복해서 입력해야 하는 불필요한 코드의 양을 줄여야 하는 경우에 사용해야 하고
       적절한 경우에만 최소한으로 사용하는 것이 좋다.
    1) branch() : 조건에 따라 다른 컴포넌트 출력
    2) withState() : 상태 관리와 이벤트 처리
    3) lifecycle() : 함수형 컴포넌트에 생명주기 함수 추가